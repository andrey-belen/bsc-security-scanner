"""
Report Generator - Handle report generation in multiple formats
"""

import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Optional
from rich.console import Console


class ReportGenerator:
    """Generate security analysis reports in various formats"""

    def __init__(self):
        self.console = Console()

    def generate_report(
        self,
        scan_results: Dict,
        output_format: str = "json",
        output_path: Optional[str] = None
    ) -> str:
        """
        Generate detailed security report

        Args:
            scan_results: Dictionary containing scan results
            output_format: Format of the report ('json' or 'markdown')
            output_path: Optional custom output path

        Returns:
            Path to the generated report file
        """

        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            address_short = scan_results["address"][:8]
            output_path = f"./reports/{address_short}_{timestamp}.{output_format}"

        # Ensure reports directory exists
        Path(output_path).parent.mkdir(parents=True, exist_ok=True)

        if output_format == "json":
            self._generate_json_report(scan_results, output_path)
        elif output_format == "markdown":
            self._generate_markdown_report(scan_results, output_path)
        else:
            raise ValueError(f"Unsupported report format: {output_format}")

        self.console.print(f"\n📄 [bold green]Report saved:[/bold green] {output_path}")
        return output_path

    def _generate_json_report(self, scan_results: Dict, output_path: str):
        """Generate JSON format report"""
        with open(output_path, 'w') as f:
            json.dump(scan_results, f, indent=2)

    def _generate_markdown_report(self, scan_results: Dict, output_path: str):
        """Generate markdown format report"""
        markdown_content = self._format_markdown(scan_results)
        with open(output_path, 'w') as f:
            f.write(markdown_content)

    def _format_markdown(self, scan_results: Dict) -> str:
        """
        Format scan results as markdown

        Args:
            scan_results: Dictionary containing scan results

        Returns:
            Markdown-formatted string
        """

        md_content = f"""# BSC Security Scan Report

## Contract Information
- **Address**: `{scan_results['address']}`
- **Chain**: {scan_results['chain']}
- **Scan Time**: {scan_results['scan_time']}
- **Token Name**: {scan_results.get('token_name', 'Unknown')}
- **Symbol**: {scan_results.get('token_symbol', 'Unknown')}

## Risk Assessment
- **Risk Score**: {scan_results['risk_score']}/100
- **Risk Level**: **{scan_results['risk_level']}**
- **Analysis Confidence**: {scan_results.get('analysis_confidence', 0) * 100:.1f}%

## Security Findings

"""

        # Add findings
        findings = scan_results.get('findings', [])
        if findings:
            for finding in findings:
                severity_emoji = self._get_severity_emoji(finding.get('severity', 'info'))

                md_content += f"### {severity_emoji} {finding.get('message', 'Unknown')}\n"
                md_content += f"- **Type**: {finding.get('type', 'unknown')}\n"
                md_content += f"- **Severity**: {finding.get('severity', 'unknown')}\n"
                md_content += f"- **Details**: {finding.get('details', 'No details')}\n\n"
        else:
            md_content += "*No security findings*\n\n"

        # Add advanced analysis if present
        if 'holder_distribution' in scan_results:
            md_content += self._format_holder_analysis(scan_results['holder_distribution'])

        if 'liquidity' in scan_results:
            md_content += self._format_liquidity_analysis(scan_results['liquidity'])

        if 'honeypot_check' in scan_results:
            md_content += self._format_honeypot_analysis(scan_results['honeypot_check'])

        md_content += """
---
*Generated by BSC Security Scanner - Educational purposes only*
"""

        return md_content

    def _format_holder_analysis(self, holder_data: Dict) -> str:
        """Format holder distribution analysis for markdown"""
        md = "\n## Holder Distribution Analysis\n\n"

        metrics = holder_data.get('metrics', {})
        md += f"- **Top 10 Concentration**: {metrics.get('top_10_concentration', 0):.2f}%\n"
        md += f"- **Whale Count**: {metrics.get('whale_count', 0)}\n"
        md += f"- **Total Holders**: {metrics.get('total_holders', 0):,}\n\n"

        # Top holders table
        top_holders = holder_data.get('top_holders', [])[:10]
        if top_holders:
            md += "### Top 10 Holders\n\n"
            md += "| Rank | Address | Balance % | Label |\n"
            md += "|------|---------|-----------|-------|\n"

            for idx, holder in enumerate(top_holders, 1):
                address = holder.get('address', 'Unknown')[:10] + "..."
                percentage = holder.get('percentage', 0)
                label = holder.get('label', '')
                md += f"| {idx} | `{address}` | {percentage:.2f}% | {label} |\n"

            md += "\n"

        return md

    def _format_liquidity_analysis(self, liquidity_data: Dict) -> str:
        """Format liquidity analysis for markdown"""
        md = "\n## Liquidity Analysis\n\n"

        metrics = liquidity_data.get('metrics', {})
        md += f"- **Total Liquidity**: ${metrics.get('total_liquidity_usd', 0):,.2f}\n"
        md += f"- **LP Burned**: {metrics.get('lp_burned_percent', 0):.2f}%\n"
        md += f"- **LP Locked**: {metrics.get('lp_locked_percent', 0):.2f}%\n"
        md += f"- **LP Unlocked**: {metrics.get('lp_unlocked_percent', 0):.2f}%\n"
        md += f"- **Pools Found**: {metrics.get('pools_found', 0)}\n\n"

        pools = liquidity_data.get('pools', [])
        if pools:
            md += "### Liquidity Pools\n\n"
            for pool in pools:
                md += f"- {pool}\n"
            md += "\n"

        return md

    def _format_honeypot_analysis(self, honeypot_data: Dict) -> str:
        """Format honeypot check for markdown"""
        md = "\n## Honeypot Analysis\n\n"

        is_honeypot = honeypot_data.get('is_honeypot', False)
        md += f"- **Is Honeypot**: {'⚠️ YES' if is_honeypot else '✅ NO'}\n\n"

        simulation = honeypot_data.get('simulation_results', {})
        if simulation:
            buy_result = simulation.get('buy', {})
            sell_result = simulation.get('sell', {})

            md += "### Simulation Results\n\n"
            md += f"**Buy Transaction**: {'✅ Success' if buy_result.get('success') else '❌ Failed'}\n"
            if buy_result.get('success'):
                md += f"- Tokens Received: {buy_result.get('tokens_received', 0)}\n"

            md += f"\n**Sell Transaction**: {'✅ Success' if sell_result.get('success') else '❌ Failed'}\n"
            if sell_result.get('success'):
                md += f"- BNB Received: {sell_result.get('bnb_received', 0)}\n"
            elif sell_result.get('error'):
                md += f"- Error: {sell_result.get('error')}\n"

            md += "\n"

        return md

    def _get_severity_emoji(self, severity: str) -> str:
        """Get emoji for severity level"""
        severity_emojis = {
            'critical': '🔴',
            'high': '🔴',
            'medium': '⚠️',
            'low': '✅',
            'info': 'ℹ️'
        }
        return severity_emojis.get(severity.lower(), '❓')
